@model HMS.Entity.ServicePayment

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Update Service</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Appointment_ID)
        @Html.HiddenFor(model => model.ID)
        @Html.HiddenFor(model => model.CreatedBy)
        @Html.HiddenFor(model => model.CreatedDate)
        @Html.HiddenFor(model => model.UpdatedBy)
        @Html.HiddenFor(model => model.UpdatedDate)

        <fieldset style="width:100%;border: 2px #eeeeee solid;">
            <br />
            <div style="width:100%; float:left;">
                <div class="left-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Service_ID, "Service Category", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownList("Service_ID", null, "----Select----", htmlAttributes: new { @class = "form-control", @onchange = "FillSubCategory()" })
                            @Html.ValidationMessageFor(model => model.Service_ID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="right-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ServiceSubCategory_ID, "Service Type", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownList("ServiceSubCategory_ID", null, "----Select----", htmlAttributes: new { @class = "form-control", @onchange = "FillServiceCharge()" })
                            @Html.ValidationMessageFor(model => model.ServiceSubCategory_ID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div style="width:100%; float:left;">
                <div class="left-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ServiceUnit, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ServiceUnit, new { htmlAttributes = new { @class = "form-control", @onchange = "updateValues()" } })
                            @Html.ValidationMessageFor(model => model.ServiceUnit, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="right-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ServiceCharge, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ServiceCharge, new { htmlAttributes = new { @class = "form-control", @onchange = "updateValues()" } })
                            @Html.ValidationMessageFor(model => model.ServiceCharge, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div style="width:100%; float:left;">
                <div class="left-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", @onchange = "updateValues()" } })
                            @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="right-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.NetAmount, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div style="width:100%; float:left;">
                <div class="left-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PaidAmount, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new { @class = "form-control", @onchange = "updateValues()" } })
                            @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="right-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DueAmount, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.DueAmount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DueAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div style="width:100%; float:left;">
                <div class="left-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Doctor_ID, "Doctor", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownList("Doctor_ID", null, "----Select----", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Doctor_ID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="right-div col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PaymentModeID, "Payment Mode", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownList("PaymentModeID", null, "----Select----", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PaymentModeID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </fieldset>
       <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    function FillSubCategory() {
        var specId = $('#Service_ID').val();
        $.ajax({
            url: '/ServicePayments/FillServiceSubCat',
            type: "GET",
            dataType: "JSON",
            data: { serviceID: specId },
            success: function (result) {
                $("#ServiceSubCategory_ID").html("");// clear before appending new list
                $("#ServiceSubCategory_ID").append($('<option></option>').html('----Select----')); // Bind default select option
                $.each(result, function (i, obj) {
                    $("#ServiceSubCategory_ID").append(
                        $('<option></option>').val(obj.Value).html(obj.Text));
                });
            }
        });
    }

    function FillServiceCharge() {
        var subCatId = $('#ServiceSubCategory_ID').val();
        $.ajax({
            url: '/ServicePayments/FillServiceCharge',
            type: "GET",
            dataType: "JSON",
            data: { serviceSubCatId: subCatId },
            success: function (result) {
                $('#ServiceCharge').val(result);
                $('#NetAmount').val(result);
                $('#DueAmount').val(result);
                $('#PaidAmount').val('0.00');
                $('#Discount').val('0.00');
            }
        });
    }

    function updateValues() {
        var qty = $('#ServiceUnit').val();
        var serviceCharge = $('#ServiceCharge').val();
        var discount = $('#Discount').val();
        var paidAmt = $('#PaidAmount').val();
        // Manipulate all fields on the basis of above values
        var netAmt = ((parseFloat(qty) * parseFloat(serviceCharge)) - (parseFloat(discount)));
        var dueAmt = (netAmt - (parseFloat(paidAmt)));

        $('#NetAmount').val(netAmt);
        $('#DueAmount').val(dueAmt);
    }
</script>